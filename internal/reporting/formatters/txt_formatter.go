package formatters

import (
	"bytes"
	"fmt"
	"strings"
	"text/tabwriter"
	"time"

	"github.com/bl4ck0w1/sublynx/internal/reporting"
)

type TXTFormatter struct{}

func (f *TXTFormatter) Format(report *reporting.ComprehensiveReport) ([]byte, error) {
	var buf bytes.Buffer
	w := &buf

	fmt.Fprintln(w, "SubNexus Security Report")
	fmt.Fprintln(w, "=======================")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "Report Metadata:")
	fmt.Fprintf(w, "  Report ID:     %s\n", report.Metadata.ReportID)
	fmt.Fprintf(w, "  Scan ID:       %s\n", report.Metadata.ScanID)
	fmt.Fprintf(w, "  Target Domain: %s\n", report.Metadata.TargetDomain)
	fmt.Fprintf(w, "  Generated By:  %s\n", report.Metadata.GeneratedBy)
	fmt.Fprintf(w, "  Tool Version:  %s\n", report.Metadata.ToolVersion)
	fmt.Fprintf(w, "  Duration:      %s\n", report.Metadata.Duration)
	fmt.Fprintf(w, "  Timestamp:     %s\n", report.Metadata.Timestamp.Format(time.RFC1123))
	fmt.Fprintln(w)
	fmt.Fprintln(w, "Executive Summary:")
	fmt.Fprintf(w, "  Total Subdomains:      %d\n", report.Summary.TotalSubdomains)
	fmt.Fprintf(w, "  Active Subdomains:     %d\n", report.Summary.ActiveSubdomains)
	fmt.Fprintf(w, "  Total Findings:        %d\n", report.Summary.TotalFindings)
	fmt.Fprintf(w, "  Critical Findings:     %d\n", report.Summary.CriticalFindings)
	fmt.Fprintf(w, "  High Risk Findings:    %d\n", report.Summary.HighRiskFindings)
	fmt.Fprintf(w, "  Medium Risk Findings:  %d\n", report.Summary.MediumRiskFindings)
	fmt.Fprintf(w, "  Low Risk Findings:     %d\n", report.Summary.LowRiskFindings)
	fmt.Fprintf(w, "  Overall Risk Score:    %.2f/10.0\n", report.Summary.RiskScore)
	fmt.Fprintln(w)
	fmt.Fprintln(w, "Risk Assessment:")
	fmt.Fprintf(w, "  Overall Risk Level: %s\n", riskLevel(report.Summary.RiskScore))
	fmt.Fprintln(w)
	if report.Summary.CriticalFindings > 0 {
		fmt.Fprintf(w, "CRITICAL FINDINGS (%d):\n", report.Summary.CriticalFindings)
		fmt.Fprintln(w, "=====================")
		for _, finding := range report.Findings {
			if strings.EqualFold(finding.Severity, "critical") {
				title := finding.Title
				if strings.TrimSpace(title) == "" {
					title = strings.Title(strings.ReplaceAll(finding.Type, "_", " "))
				}
				reco := finding.Recommendation
				if strings.TrimSpace(reco) == "" {
					reco = "See Recommendations section."
				}
				fmt.Fprintf(w, "  - %s: %s\n", title, finding.Description)
				fmt.Fprintf(w, "    Target: %s\n", finding.Target)
				fmt.Fprintf(w, "    Recommendation: %s\n", reco)
				fmt.Fprintln(w)
			}
		}
		fmt.Fprintln(w)
	}

	if len(report.Recommendations) > 0 {
		fmt.Fprintln(w, "SECURITY RECOMMENDATIONS:")
		fmt.Fprintln(w, "=========================")
		for _, rec := range report.Recommendations {
			fmt.Fprintf(w, "  %s (%s)\n", rec.Title, strings.Title(rec.Severity))
			fmt.Fprintf(w, "  Description: %s\n", rec.Description)
			fmt.Fprintf(w, "  Remediation: %s\n", rec.Remediation)
			if len(rec.Affected) > 0 {
				fmt.Fprintf(w, "  Affected: %s\n", strings.Join(rec.Affected, ", "))
			}
			fmt.Fprintln(w)
		}
	}

	fmt.Fprintln(w, "SUBDOMAIN DETAILS:")
	fmt.Fprintln(w, "==================")
	tw := tabwriter.NewWriter(w, 0, 0, 2, ' ', 0)
	fmt.Fprintln(tw, "SUBDOMAIN\tSTATUS\tIP ADDRESS\tTECHNOLOGY\tLAST SEEN")
	fmt.Fprintln(tw, "---------\t------\t----------\t-----------\t---------")
	for _, sd := range report.Subdomains {
		ips := strings.Join(sd.IPAddresses, ", ")
		tech := strings.Join(sd.Technologies, ", ")
		fmt.Fprintf(tw, "%s\t%s\t%s\t%s\t%s\n",
			sd.Name,
			sd.Status,
			ips,
			tech,
			formatDate(sd.LastSeen),
		)
	}
	_ = tw.Flush()
	fmt.Fprintln(w)

	if len(report.Findings) > 0 {
		fmt.Fprintln(w, "DETAILED FINDINGS:")
		fmt.Fprintln(w, "==================")
		tw = tabwriter.NewWriter(w, 0, 0, 2, ' ', 0)
		fmt.Fprintln(tw, "SEVERITY\tTARGET\tTYPE\tDESCRIPTION\tRECOMMENDATION")
		fmt.Fprintln(tw, "--------\t------\t----\t-----------\t-------------")
		for _, finding := range report.Findings {
			reco := finding.Recommendation
			if strings.TrimSpace(reco) == "" {
				reco = "See Recommendations section."
			}
			fmt.Fprintf(tw, "%s\t%s\t%s\t%s\t%s\n",
				strings.Title(finding.Severity),
				finding.Target,
				finding.Type,
				truncateString(finding.Description, 80),
				truncateString(reco, 80),
			)
		}
		_ = tw.Flush()
		fmt.Fprintln(w)
	}

	fmt.Fprintf(w, "Report generated by SubNexus on %s\n", report.GeneratedAt.Format(time.RFC1123))
	fmt.Fprintln(w, "For more information, visit https://github.com/your-org/subnexus")

	return buf.Bytes(), nil
}

func (f *TXTFormatter) FileExtension() string { return "txt" }


func truncateString(s string, maxLen int) string {
	if maxLen <= 0 || len(s) <= maxLen {
		return s
	}
	if idx := strings.LastIndex(s[:maxLen], " "); idx > 0 && idx > maxLen-20 {
		return s[:idx] + "..."
	}
	return s[:maxLen] + "..."
}

func riskLevel(score float64) string {
	switch {
	case score >= 7.0:
		return "High"
	case score >= 4.0:
		return "Medium"
	default:
		return "Low"
	}
}

func formatDate(t time.Time) string {
	if t.IsZero() {
		return "n/a"
	}
	return t.Format("2006-01-02")
}
