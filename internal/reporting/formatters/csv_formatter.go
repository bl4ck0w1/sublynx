package formatters

import (
	"bytes"
	"encoding/csv"
	"fmt"
	"strings"
	"time"
	"github.com/bl4ck0w1/sublynx/internal/reporting"
)

type CSVFormatter struct{}

func (f *CSVFormatter) Format(report *reporting.ComprehensiveReport) ([]byte, error) {
	var buf bytes.Buffer
	writer := csv.NewWriter(&buf)

	write := func(fields ...string) error {
		for i := range fields {
			fields[i] = clean(fields[i])
		}
		return writer.Write(fields)
	}

	if err := write("Report Metadata"); err != nil {
		return nil, err
	}
	if err := write("Report ID", report.Metadata.ReportID); err != nil {
		return nil, err
	}
	if err := write("Scan ID", report.Metadata.ScanID); err != nil {
		return nil, err
	}
	if err := write("Target Domain", report.Metadata.TargetDomain); err != nil {
		return nil, err
	}
	if err := write("Generated By", report.Metadata.GeneratedBy); err != nil {
		return nil, err
	}
	if err := write("Tool Version", report.Metadata.ToolVersion); err != nil {
		return nil, err
	}
	if err := write("Duration", report.Metadata.Duration); err != nil {
		return nil, err
	}
	if err := write("Timestamp", report.Metadata.Timestamp.Format(time.RFC3339)); err != nil {
		return nil, err
	}
	if err := write(); err != nil { 
		return nil, err
	}

	if err := write("Executive Summary"); err != nil {
		return nil, err
	}
	if err := write("Total Subdomains", fmt.Sprintf("%d", report.Summary.TotalSubdomains)); err != nil {
		return nil, err
	}
	if err := write("Active Subdomains", fmt.Sprintf("%d", report.Summary.ActiveSubdomains)); err != nil {
		return nil, err
	}
	if err := write("Total Findings", fmt.Sprintf("%d", report.Summary.TotalFindings)); err != nil {
		return nil, err
	}
	if err := write("Critical Findings", fmt.Sprintf("%d", report.Summary.CriticalFindings)); err != nil {
		return nil, err
	}
	if err := write("High Risk Findings", fmt.Sprintf("%d", report.Summary.HighRiskFindings)); err != nil {
		return nil, err
	}
	if err := write("Medium Risk Findings", fmt.Sprintf("%d", report.Summary.MediumRiskFindings)); err != nil {
		return nil, err
	}
	if err := write("Low Risk Findings", fmt.Sprintf("%d", report.Summary.LowRiskFindings)); err != nil {
		return nil, err
	}
	if err := write("Overall Risk Score", fmt.Sprintf("%.2f", report.Summary.RiskScore)); err != nil {
		return nil, err
	}
	if err := write(); err != nil {
		return nil, err
	}

	if err := write("Subdomains"); err != nil {
		return nil, err
	}
	if err := write("Name", "Status", "IP Addresses", "Technologies", "Last Seen"); err != nil {
		return nil, err
	}
	for _, sd := range report.Subdomains {
		if err := write(
			sd.Name,
			sd.Status,
			strings.Join(sd.IPAddresses, "; "),
			strings.Join(sd.Technologies, "; "),
			formatDate(sd.LastSeen),
		); err != nil {
			return nil, err
		}
	}
	if err := write(); err != nil {
		return nil, err
	}

	if len(report.Findings) > 0 {
		if err := write("Findings"); err != nil {
			return nil, err
		}
		if err := write("Severity", "Target", "Type", "Description", "Recommendation"); err != nil {
			return nil, err
		}
		for _, fnd := range report.Findings {
			reco := fnd.Recommendation
			if strings.TrimSpace(reco) == "" {
				reco = "See Recommendations section."
			}
			if err := write(
				fnd.Severity,
				fnd.Target,
				fnd.Type,
				fnd.Description,
				reco,
			); err != nil {
				return nil, err
			}
		}
		if err := write(); err != nil {
			return nil, err
		}
	}

	if len(report.Recommendations) > 0 {
		if err := write("Recommendations"); err != nil {
			return nil, err
		}
		if err := write("ID", "Title", "Severity", "Description", "Remediation", "Affected", "Priority"); err != nil {
			return nil, err
		}
		for _, rec := range report.Recommendations {
			if err := write(
				rec.ID,
				rec.Title,
				rec.Severity,
				rec.Description,
				rec.Remediation,
				strings.Join(rec.Affected, "; "),
				fmt.Sprintf("%d", rec.Priority),
			); err != nil {
				return nil, err
			}
		}
	}

	writer.Flush()
	if err := writer.Error(); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

func (f *CSVFormatter) FileExtension() string {
	return "csv"
}

func clean(s string) string {
	if s == "" {
		return s
	}
	s = strings.ReplaceAll(s, "\r", " ")
	s = strings.ReplaceAll(s, "\n", " ")
	s = strings.ReplaceAll(s, "\t", " ")
	return strings.TrimSpace(s)
}

func formatDate(t time.Time) string {
	if t.IsZero() {
		return "n/a"
	}
	return t.Format("2006-01-02")
}
